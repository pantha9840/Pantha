'''
Title: Compute active region parameters from HMI SHARP CEA data & study their evolution
Author: Pantha Mondal
Date: [2025-07-03]
Description:
    This script filters AR for sharp cea data and calculates tilt angle, flux, 
    magnetic field strength, footpoint separation, latitude & longitude for specific 
    timestamps

Notes:
    - Requires access to JSOC library..
'''

import os
import matplotlib.pyplot as plt
from astropy.io import fits
import drms
import numpy as np
from datetime import datetime
from scipy.ndimage import label
import sunpy.map

# PARAMETERS
series = 'hmi.sharp_cea_720s'
sharpnum = 3563
#target_time = datetime(2014, 1, 9,12 , 0, 0)##use this Target time for specific time
bth = 150
segment = 'Br'
kwlist = ['T_REC','LON_FWT','OBS_VR','CROTA2','CRPIX1','CRPIX2', #keyword list put necessary
          'CDELT1','CDELT2','CRVAL1','CRVAL2','USFLUX']

c = drms.Client(email='pantha9762@gmail.com')
target_time = drms.to_datetime(c.query(f'{series}[{sharpnum}]', key='T_REC,LON_FWT')['T_REC'][
    c.query(f'{series}[{sharpnum}]', key='LON_FWT')['LON_FWT'].abs().idxmin()])##use this Target time for cm
k = c.query(f'{series}[{sharpnum}]', key=kwlist, rec_index=True) #has all the kwlist data, print it as csv to see
k['time'] = drms.to_datetime(k.T_REC) #has the time stamp in last col
time_diff = (k['time'] - target_time).abs()
rec = time_diff.idxmin() #Trget
selected_rec = k.loc[rec] #log of target data All
selected_time = selected_rec['time'] #selects the nearest time available in record
t_str = selected_time.strftime('%Y%m%d_%H%M%S_TAI')#20140105_090000_TAI
fname = f'{series}.{sharpnum}.{t_str}.{segment}.fits' #just hmi.sharp_cea_720s.3563.20140105_090000_TAI.Br.fits

#download the target file,
if not os.path.exists(fname):
    exp_query = f'{rec}{{{segment}}}'
    r = c.export(exp_query, method='url', protocol='fits')
    r.download('.')
with fits.open(fname) as hdulist:
    mag = hdulist[1].data


mag_cleaned = np.copy(mag)   #making a copy of mag(nitude)
mag_cleaned[np.abs(mag_cleaned) < bth] = 0 #putting a primary tyheshold

#coordinate selection(from sample)
ny, nx = mag.shape #(x,y) shape number
xmin = (1 - selected_rec.CRPIX1) * selected_rec.CDELT1 + selected_rec.CRVAL1
xmax = (nx - selected_rec.CRPIX1) * selected_rec.CDELT1 + selected_rec.CRVAL1
ymin = (1 - selected_rec.CRPIX2) * selected_rec.CDELT2 + selected_rec.CRVAL2
ymax = (ny - selected_rec.CRPIX2) * selected_rec.CDELT2 + selected_rec.CRVAL2
x_data = np.linspace(xmin, xmax, nx)
y_data = np.linspace(ymin, ymax, ny)
X, Y = np.meshgrid(x_data, y_data)

# LABEL REGIONS
mask_binary = (mag_cleaned != 0) #condition-true OR false
labels, num_labels = label(mask_binary) #labelling using sunpy

# Calculate area and flux thresholds
pixel_area = (0.5 * 7.2e2) * (0.5 * 7.2e2)#dx*dy
all_areas = []
all_fluxes = []
for label_num in range(1, num_labels + 1): #1 to number of labels 
    ys, xs = np.where(labels == label_num)## Get pixel indices for this region,assume ys for area and xs for flux
    area_label = ys.size ## Count of pixels in this region, raw pixel area
    flux_label = np.sum(np.abs(mag_cleaned[ys, xs])) *pixel_area* 1e10 #1 km² = 1e10 cm²
    # Sum of absolute B_r over region,# Multiply by pixel area and scale to Mx(i.e. int B da)
    all_areas.append(area_label)
    all_fluxes.append(flux_label)

area_min = 0.5 * max(all_areas) if all_areas else 0
flux_min = 0.5 * max(all_fluxes) if all_fluxes else 0

# Select significant regions (must pass BOTH area and flux thresholds)
significant_regions = []
for label_num in range(1, num_labels + 1):
    ys, xs = np.where(labels == label_num)
    area_label = ys.size
    flux_label = np.sum(np.abs(mag_cleaned[ys, xs])) * pixel_area * 1e10
    
    # Combined threshold condition

    if area_label >= area_min or flux_label >= flux_min:
        xc_label = np.mean(X[ys, xs])
        yc_label = np.mean(Y[ys, xs])
        avg_polarity = np.mean(mag_cleaned[ys, xs])
        significant_regions.append({
            'label': label_num, 
            'area': area_label, 
            'flux': flux_label,
            'x': xc_label, 
            'y': yc_label, 
            'polarity': avg_polarity
        })

# Find pos/neg regions
positive_regions = [r for r in significant_regions if r['polarity'] > 0]
negative_regions = [r for r in significant_regions if r['polarity'] < 0]

positive = max(positive_regions, key=lambda x: x['flux']) if positive_regions else None
negative = max(negative_regions, key=lambda x: x['flux']) if negative_regions else None

# Create mask with both criteria
if positive and negative:
    final_mask = np.logical_or(labels == positive['label'], labels == negative['label'])
    mag_masked = np.where(final_mask, mag_cleaned, 0)
else:
    mag_masked = np.zeros_like(mag_cleaned)
    final_mask = np.zeros_like(mag_cleaned, dtype=bool)

# Calculate centroids
if positive and negative:
    pos_mask = (mag_masked > 0) & final_mask
    pos_weights = mag_masked * pos_mask
    x_centroid_pos = np.sum(X * pos_weights) / np.sum(pos_weights)
    y_centroid_pos = np.sum(Y * pos_weights) / np.sum(pos_weights)

    neg_mask = (mag_masked < 0) & final_mask
    neg_weights = np.abs(mag_masked * neg_mask)
    x_centroid_neg = np.sum(X * neg_weights) / np.sum(neg_weights)
    y_centroid_neg = np.sum(Y * neg_weights) / np.sum(neg_weights)
else:
    x_centroid_pos = y_centroid_pos = x_centroid_neg = y_centroid_neg = 0

# Calculate tilt angle
if positive and negative:
    dx = x_centroid_pos - x_centroid_neg
    dy = y_centroid_pos - y_centroid_neg
    tilt_angle_deg = np.degrees(np.arctan2(dy, dx))
else:
    tilt_angle_deg = 0
    dx = dy = 0

# AREA & FLUX CALCULATIONS
try:
    a1 = sunpy.map.Map(fname)
    area_hdr = a1.meta.get('area_acr', np.nan)
except: #if not available
    area_hdr = np.nan

r_sun = 6.96e5
dx_phys = 0.5 * 7.2e2
dy_phys = 0.5 * 7.2e2
da = dx_phys * dy_phys
unit_mh = 2.0 * np.pi * r_sun**2
mask = (mag_masked != 0)
area_ar = np.sum(mask) * da
area_calc = area_ar / unit_mh * 1e6

da_cm2 = dx_phys * dy_phys * 1e10
phi_total = np.sum(np.abs(mag_masked)) * da_cm2
phi_pos = np.sum(mag_masked[mag_masked > 0]) * da_cm2 if positive else 0
phi_neg = np.sum(mag_masked[mag_masked < 0]) * da_cm2 if negative else 0

# Footpoint separation
d_arcsec = np.sqrt(dx**2 + dy**2) if positive and negative else 0
d_km = d_arcsec * 725

# PRINT RESULTS
print("\n=== RESULTS ===")
print(f"Timestamp: {selected_time}")
print(f"Area threshold: {area_min:.0f} pixels, Flux threshold: {flux_min:.2e} Mx")
if positive and negative:
    print(f"Positive centroid: ({x_centroid_pos:.2f}, {y_centroid_pos:.2f}) arcsec")
    print(f"Negative centroid: ({x_centroid_neg:.2f}, {y_centroid_neg:.2f}) arcsec")
    if tilt_angle_deg>90:print(f"Tilt Angle: {180-tilt_angle_deg:.2f}°")
    else: print(f"Tilt Angle: {tilt_angle_deg:.2f}°")
else:
    print("No significant positive/negative pair found")
print(f"\nArea measurements:")
print(f"Calculated area = {area_calc:.2f} µH")
print(f"Header area = {area_hdr} µH")
print(f"\nFlux measurements:")
print(f"provided flux = {selected_rec.USFLUX} µH")
print(f"Total unsigned magnetic flux Φm = {phi_total:.2e} Mx")
print(f"Positive polarity flux Φ+ = {phi_pos:.2e} Mx")
print(f"Negative polarity flux Φ– = {phi_neg:.2e} Mx")
print(f"\nOther parameters:")
print(f"Footpoint separation: {d_arcsec:.2f} arcsec ≈ {d_km:.2f} km")
print(f"Bmax = {np.max(mag_masked):.2f} G, Bmin = {np.min(mag_masked):.2f} G, |Bmax| = {np.max(np.abs(mag_masked)):.2f} G")

# PLOT
plt.figure(figsize=(8, 6))
vmax = 1 #max(np.max(mag_masked), abs(np.min(mag_masked))) / 1e3
vmin = -vmax
plt.imshow(mag_masked / 1e3, origin='lower', cmap='gray',extent=[xmin, xmax, ymin, ymax], vmin=vmin, vmax=vmax)

plt.colorbar(label=r'$B_{r}$ [kG]')
if positive and negative:
    plt.plot(x_centroid_pos, y_centroid_pos, 'ro', label='Positive Centroid')
    plt.plot(x_centroid_neg, y_centroid_neg, 'bo', label='Negative Centroid')
    plt.plot([x_centroid_neg, x_centroid_pos], [y_centroid_neg, y_centroid_pos], 'y-', label='BMR Axis')
plt.axhline(y_centroid_neg if negative else 0, color='cyan', linestyle='--', label='Solar Equator')
if tilt_angle_deg>90:plt.title(f"{selected_time}\nTilt angle = {180-tilt_angle_deg:.2f}°")
else:plt.title(f"{selected_time}\nTilt angle = {tilt_angle_deg:.2f}°")
plt.xlabel('Solar X [arcsec]')
plt.ylabel('Solar Y [arcsec]')
plt.axis('image')
plt.legend(loc='lower right')
plt.tight_layout()
#plt.xlim(85,109)
#plt.ylim(-17.5,-5)
plt.show()
